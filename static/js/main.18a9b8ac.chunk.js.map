{"version":3,"sources":["actions/index.js","constants/actionType.js","components/task-form.js","components/sort.js","components/search.js","components/control.js","components/task-item.js","components/task-list.js","App.js","serviceWorker.js","reducers/tasks.js","reducers/displayForm.js","reducers/editTask.js","reducers/filterTasks.js","reducers/controlFilter.js","reducers/index.js","index.js"],"names":["openForm","headerName","type","editTask","task","TaskForm","props","setItem","event","name","target","value","setState","onSubmit","preventDefault","state","onAddTask","hide","reset","status","onCloseForm","id","taskEditing","prevProps","this","className","style","flexGrow","textAlign","onClick","fontSize","backgroundColor","borderWidth","aria-hidden","onReset","htmlFor","placeholder","aria-describedby","onChange","checked","React","Component","connect","displayForm","dispatch","action","Sort","onSort","typeSort","direct","onSortStatus","sortValue","data-toggle","controlFilter","sortStatus","filterValue","Search","setValue","filterName","searchName","onSearchName","Control","onToggleForm","onOpenForm","onEditTask","headerFormName","TaskItem","UpdateItem","changeStatus","onUpdateStatus","deleteItem","onDeleteTask","taskItem","index","stt","TaskList","filterTable","filter","filterStatus","tasks","filterFromTable","filterFromControl","sortVal","filterByName","toLowerCase","indexOf","sort","prevTask","nextTask","tasksArray","map","obj","key","colSpan","filterTask","App","toggleDisplay","elmTaskForm","isDisplayForm","keywordFilter","porps","Boolean","window","location","hostname","match","data","JSON","parse","localStorage","getItem","initialState","length","getRandomString","s4","Math","floor","random","toString","substring","findIndex","numId","result","forEach","reducer","tempTask","push","stringify","splice","newFilter","sumReducer","combineReducers","store","createStore","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.18a9b8ac.chunk.js","sourcesContent":["import * as types from \"./../constants/actionType\";\r\n\r\nexport const listAll = () => {\r\n    return {\r\n        type: types.LIST_ALL,\r\n    };\r\n};\r\n\r\nexport const  addTask = (task) => {\r\n    return {\r\n        type: types.ADD_TASK,\r\n        task: task,\r\n    }\r\n};\r\n\r\nexport const openForm = (headerName) => {\r\n    return {\r\n        type: types.OPEN_FORM,\r\n        headerName: headerName,\r\n    }\r\n};\r\n\r\nexport const closeForm = () => {\r\n    return {\r\n        type: types.CLOSE_FORM,\r\n    }\r\n};\r\n\r\nexport const updateStatus = (id) => {\r\n    return {\r\n        type: types.UPDATE_STATUS,\r\n        id: id,\r\n    }\r\n}\r\n\r\nexport const deleteTask = (id) => {\r\n    return {\r\n        type: types.DELETE_TASK,\r\n        id: id,\r\n    };\r\n}\r\n\r\nexport const editTask = (task) => {\r\n    return {\r\n        type: types.EDIT_TASK,\r\n        task: task,\r\n    };\r\n}\r\n\r\nexport const tableFilter = (value) => {\r\n    return {\r\n        type: types.TABLE_FILTER,\r\n        filterValue: value,\r\n    }\r\n}\r\n\r\nexport const controlSearch = (value) => {\r\n    return {\r\n        type: types.CONTROL_SEARCH,\r\n        filterValue: value,\r\n    }\r\n}\r\n\r\nexport const controlSort = (objValue) => {\r\n    return {\r\n        type: types.CONTROL_SORT,\r\n        filterValue: objValue,\r\n    }\r\n}","export const LIST_ALL = \"LIST_ALL\";\r\nexport const ADD_TASK = \"ADD_TASK\";\r\nexport const OPEN_FORM = \"OPEN_FORM\";\r\nexport const CLOSE_FORM = \"CLOSE_FORM\";\r\nexport const UPDATE_STATUS = \"UPDATE_STATUS\";\r\nexport const DELETE_TASK = \"DELETE_TASK\";\r\nexport const EDIT_TASK = \"EDIT_TASK\";\r\nexport const TABLE_FILTER = \"TABLE_FILTER\";\r\nexport const CONTROL_SEARCH = \"CONTROL_SEARCH\";\r\nexport const CONTROL_SORT = \"CONTROL_SORT\";","import React from 'react';\r\n\r\nimport { connect } from \"react-redux\";\r\nimport * as action from \"./../actions/index\";\r\n\r\nclass TaskForm extends React.Component{\r\n    constructor (props){\r\n        super(props);\r\n        this.state = {\r\n            id: this.props.taskEditing.id,\r\n            name: this.props.taskEditing.name,\r\n            status: this.props.taskEditing.status === true ? \"true\" : \"false\",\r\n            headerName: this.props.headerName,\r\n        }\r\n    }\r\n    componentDidUpdate(prevProps) {\r\n        if(this.props.taskEditing.name !== prevProps.taskEditing.name){\r\n            this.setState({\r\n                headerName: this.props.headerName,\r\n                id: this.props.taskEditing.id,\r\n                name: this.props.taskEditing.name,\r\n                status: this.props.taskEditing.status === true ? \"true\" : \"false\",\r\n            });\r\n        }\r\n    };\r\n    setItem = (event) => {\r\n        let name = event.target.name;\r\n        let value = event.target.value;\r\n        this.setState({\r\n            [name] : value,\r\n        });\r\n    }\r\n    onSubmit = (event) => {\r\n        event.preventDefault();\r\n        if(this.state.name !== \"\"){\r\n            this.props.onAddTask(this.state);\r\n            this.hide();\r\n        }\r\n    }\r\n    reset = () => {\r\n        this.setState({\r\n            name: \"\",\r\n            status: \"false\",\r\n        })\r\n    }\r\n    hide = () => {\r\n        this.props.onCloseForm();\r\n    }\r\n    render(){\r\n        let {headerName, name, status} = this.state;\r\n        return (\r\n            <div id=\"tempHeight\">\r\n                <div className=\"d-flex flex-row\">\r\n                    <h3 style={{flexGrow: 1, textAlign: \"center\"}}>\r\n                        {headerName}\r\n                    </h3>\r\n                    <button onClick={this.hide} style={{fontSize: \"30px\", backgroundColor: \"transparent\", borderWidth: 0}} className=\"fa fa-times-circle-o\" aria-hidden=\"true\"></button>\r\n                </div>\r\n                <form className=\"mx-2 mt-3\" onSubmit={this.onSubmit} onReset={this.reset}>\r\n                    <div className=\"form-group\">\r\n                        <label htmlFor=\"\">Tên công việc:</label>\r\n                        <input  type=\"text\"className=\"form-control\" placeholder=\"Nhập tên\" aria-describedby=\"helpId\"\r\n                                name=\"name\"\r\n                                value={name}\r\n                                onChange={this.setItem}\r\n                        />\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <label>Trạng thái</label><br/>\r\n                        <div className=\"form-check-inline\">\r\n                            <label className=\"form-check-label\">\r\n                                <input  type=\"radio\" className=\"form-check-input\"\r\n                                        name=\"status\"\r\n                                        value={\"true\"}\r\n                                        checked={status === \"true\"}\r\n                                        onChange={this.setItem}\r\n                                ></input>Kích hoạt\r\n                            </label>\r\n                        </div>\r\n                        <div className=\"form-check-inline\">\r\n                            <label className=\"form-check-label\">\r\n                                <input  type=\"radio\" className=\"form-check-input\"\r\n                                        name=\"status\"\r\n                                        value={\"false\"}\r\n                                        checked={status === \"false\"}\r\n                                        onChange={this.setItem}\r\n                                ></input>Ẩn\r\n                            </label>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"from-group text-center\">\r\n                        <input className=\"btn btn-success mb-5\" type=\"submit\" value=\"Lưu\"></input>\r\n                        <input className=\"btn btn-danger mb-5\" type=\"reset\" value=\"Làm mới\"></input>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        headerName: state.displayForm.headerName,\r\n        taskEditing: state.editTask,\r\n    };\r\n};\r\nconst mapDispatchToProps = (dispatch, props) => {\r\n    return {\r\n        onCloseForm: () => {\r\n            dispatch(action.closeForm());\r\n        },\r\n        onAddTask: (task) => {\r\n            dispatch(action.addTask(task));\r\n        }\r\n    };\r\n};\r\nexport default connect(mapStateToProps,mapDispatchToProps)(TaskForm);","import React from 'react';\r\n\r\nimport { connect } from 'react-redux';\r\nimport * as action from \"./../actions/index\";\r\n\r\nclass Sort extends React.Component{\r\n    onSort = (typeSort, direct) => {\r\n        this.props.onSortStatus({\r\n            type: typeSort,\r\n            direct: direct,\r\n        });\r\n    }\r\n    render(){\r\n        let { sortValue } = this.props;\r\n        return (\r\n            <div className=\"col-2 dropdown\">\r\n                <button className=\"btn btn-primary dropdown-toggle\" data-toggle=\"dropdown\"><i className=\"fa fa-sort\" aria-hidden=\"true\"></i> Sắp xếp</button>\r\n                <div className=\"dropdown-menu\">\r\n                    <h3 className=\"dropdown-header bg-dark text-white\">Theo tên</h3>\r\n                    <button\r\n                        className={\"dropdown-item \" + (sortValue.type === \"name\" && sortValue.direct === 1 ? \"checked\" : \"\")}\r\n                        onClick={ () => this.onSort(\"name\",1) }\r\n                    >A-Z</button>\r\n                    <button\r\n                        className={\"dropdown-item \" + (sortValue.type === \"name\" && sortValue.direct === -1 ? \"checked\" : \"\")}\r\n                        onClick={ () => this.onSort(\"name\",-1) }\r\n                    >Z-A</button>\r\n                    <h3 className=\"dropdown-header bg-dark text-white\">Theo trạng thái</h3>\r\n                    <button\r\n                        className={\"dropdown-item \" + (sortValue.type === \"status\" && sortValue.direct === 1 ? \"checked\" : \"\")}\r\n                        onClick={ () => this.onSort(\"status\",1) }\r\n                    >Kích hoạt</button>\r\n                    <button\r\n                        className={\"dropdown-item \" + (sortValue.type === \"status\" && sortValue.direct === -1 ? \"checked\" : \"\")}\r\n                        onClick={ () => this.onSort(\"status\",-1) }\r\n                    >Ẩn</button>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nconst mapStateToProps = state => {\r\n    return {\r\n        sortValue: state.controlFilter.sortStatus,\r\n    }\r\n};\r\nconst mapDispatchToProps = (dispatch, props) => {\r\n    return {\r\n        onSortStatus: (filterValue) => {\r\n            dispatch(action.controlSort(filterValue));\r\n        }\r\n    }\r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps) (Sort);","import React from 'react';\r\n\r\nimport { connect } from 'react-redux';\r\nimport * as action from \"./../actions/index\";\r\n\r\nclass Search extends React.Component{\r\n    constructor (props){\r\n        super(props);\r\n        this.state = {\r\n            filterName: \"\"\r\n        }\r\n    }\r\n    setValue = (event) => {\r\n        this.setState({\r\n            filterName: event.target.value\r\n        })\r\n    }\r\n    searchName = () => {\r\n        this.props.onSearchName(this.state.filterName);\r\n    }\r\n    render(){\r\n        return (\r\n            <div className=\"col-8\">\r\n                <div className=\"input-group input-group-md\">\r\n                    <input type=\"text\" className=\"form-control\" placeholder=\"Nhập từ khóa\"\r\n                            name=\"filterName\"\r\n                            onChange={this.setValue}\r\n                    ></input>\r\n                    <div className=\"input-group-append\">\r\n                        <button  type=\"text\" className=\"btn btn-primary\"\r\n                            onClick={this.searchName}\r\n                        ><i className=\"fa fa-search\" aria-hidden=\"true\"></i> Tìm kiếm</button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nconst mapDispatchToProps = (dispatch, props) => {\r\n    return {\r\n        onSearchName: (filterValue) => {\r\n            dispatch(action.controlSearch(filterValue));\r\n        }\r\n    }\r\n}\r\nexport default connect(null, mapDispatchToProps) (Search);","import React from 'react';\r\nimport Sort from \"./sort\";\r\nimport Search from \"./search\";\r\n\r\nimport { connect } from 'react-redux';\r\nimport * as action from \"./../actions/index\";\r\n\r\n\r\nclass Control extends React.Component{\r\n    onToggleForm = () => {\r\n        this.props.onOpenForm(\"Thêm công việc\");\r\n        this.props.onEditTask({id: null,name: \"\", status: \"\"}); // khi click \"thêm cộng việc\", set lại giá trị rỗng (mặc định) cho taskform;\r\n    }\r\n    render(){\r\n        return (\r\n            <div className=\"row\">\r\n                <div className=\"col-xl-2\">\r\n                    <button className=\"btn btn-primary\" onClick={this.onToggleForm}><i className=\"fa fa-plus\" aria-hidden=\"true\"></i> Thêm công việc</button>\r\n                </div>\r\n                <Search/>\r\n                <Sort/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nconst mapDispatchToProps = (dispatch, props) => {\r\n    return {\r\n        onOpenForm: (headerFormName) => {\r\n            dispatch(action.openForm(headerFormName));\r\n        },\r\n        onEditTask: (task) => {\r\n            dispatch(action.editTask(task));\r\n        },\r\n    };\r\n}\r\nexport default connect(null,mapDispatchToProps) (Control);","import React from 'react';\r\n\r\nimport { connect } from \"react-redux\";\r\nimport * as action from \"./../actions/index\";\r\n\r\nclass TaskItem extends React.Component{\r\n    constructor (props){\r\n        super(props);\r\n        this.state = {\r\n            id: this.props.taskItem.id,\r\n            index: this.props.index,\r\n            status: this.props.taskItem.status,\r\n            name: this.props.taskItem.name,\r\n        }\r\n    }\r\n    componentDidUpdate(prevProps){\r\n        if(this.state.name !== this.props.taskItem.name || this.state.status !== this.props.taskItem.status ){\r\n            this.setState({\r\n                status: this.props.taskItem.status,\r\n                name: this.props.taskItem.name,\r\n            });\r\n        }\r\n    }\r\n    UpdateItem = () => {\r\n        this.props.onOpenForm(\"Sửa công việc\");\r\n        this.props.onEditTask(this.state);\r\n    }\r\n    changeStatus = () => {\r\n        this.props.onUpdateStatus(this.state.id);\r\n    }\r\n    deleteItem = () => {\r\n        this.props.onDeleteTask(this.state.id);\r\n    }\r\n    render(){\r\n        let stt = this.props.index + 1;\r\n        let name = this.props.taskItem.name;\r\n        let status = this.props.taskItem.status;\r\n        return (\r\n            <tr>\r\n                <td>{stt}</td>\r\n                <td>{name}</td>\r\n                 <td><button    className={\"btn \" + (status === true ? \"btn-success\" : \"btn-info\")}\r\n                                onClick={this.changeStatus}\r\n                    >\r\n                                { status === true ? \"Kích hoạt\" : \"Ẩn\" }\r\n                </button></td>\r\n                <td>\r\n                    <button className=\"btn btn-warning\" onClick={this.UpdateItem}><i className=\"fa fa-pencil\" aria-hidden=\"true\"></i> Sửa</button>\r\n                    <button className=\"btn btn-danger\" onClick={this.deleteItem}><i className=\"fa fa-recycle\" aria-hidden=\"true\"></i> Xóa</button>\r\n                </td>\r\n            </tr>\r\n        );\r\n    }\r\n}\r\nconst mapStateToProps = (state) => {\r\n    return {};\r\n};\r\nconst mapDispatchToProps = (dispatch, props) => {\r\n    return {\r\n        onUpdateStatus: (id) => {\r\n            dispatch(action.updateStatus(id));\r\n        },\r\n        onDeleteTask: (id) => {\r\n            dispatch(action.deleteTask(id));\r\n            dispatch(action.closeForm());\r\n        },\r\n        onOpenForm: (headerFormName) => {\r\n            dispatch(action.openForm(headerFormName));\r\n        },\r\n        onEditTask: (task) => {\r\n            dispatch(action.editTask(task));\r\n        },\r\n    };\r\n}\r\nexport default connect(mapStateToProps,mapDispatchToProps)(TaskItem);","import React from 'react';\r\nimport TaskItem from \"./task-item\";\r\n\r\nimport { connect } from 'react-redux';\r\nimport * as action from \"./../actions/index\";\r\n\r\nclass TaskList extends React.Component{\r\n    constructor (props){\r\n        super(props);\r\n        this.state = {\r\n            filterStatus: -1,\r\n            filterName: \"\",\r\n        }\r\n    }\r\n    filterTable = (event) => {\r\n        let name = event.target.name;\r\n        let value = event.target.value;\r\n        this.setState({ \r\n            [name] : value,\r\n        });\r\n        const filter = {\r\n            filterName: name === \"filterName\" ? value : this.state.filterName,\r\n            filterStatus: name === \"filterStatus\" ? +value : +this.state.filterStatus,\r\n        };\r\n       \r\n        this.props.filterTable(filter);\r\n    }\r\n    render(){\r\n        let { tasks, filterFromTable, filterFromControl } = this.props;\r\n        let sortVal = filterFromControl.sortStatus;\r\n\r\n        function filterByName(name) {\r\n            if(name){  // Nếu như filterName khác \"\" thì so sánh \r\n                tasks = tasks.filter( task => { \r\n                    return task.name.toLowerCase().indexOf(name.toLowerCase()) !== -1;\r\n                });\r\n            };\r\n        };\r\n\r\n        function filterByStatus(status){\r\n            tasks = tasks.filter( task => {\r\n                if(status === -1){\r\n                    return true;\r\n                }\r\n                else {\r\n                    return (task.status === true ? 1 : 0) === status;\r\n                }\r\n            });\r\n        }\r\n\r\n        // Lọc dữ liệu từ filter trong bảng (taskList Component)\r\n        filterByName(filterFromTable.filterName);\r\n        filterByStatus(filterFromTable.filterStatus);\r\n\r\n        // Lọc dữ liệu từ filter trong control ( control Component )\r\n        filterByName(filterFromControl.searchName);\r\n        \r\n        tasks.sort((prevTask , nextTask) => {\r\n            if(sortVal.type === \"name\"){ // Sắp xếp theo tân\r\n                if( prevTask.name < nextTask.name ) return -sortVal.direct;\r\n                else if( prevTask.name > nextTask.name ) return sortVal.direct;\r\n                else return 0;\r\n            }\r\n            else {    // Sắp xếo theo status\r\n                if( prevTask.status < nextTask.status ) return sortVal.direct;\r\n                else if( prevTask.status > nextTask.status ) return -sortVal.direct;\r\n                else return 0;\r\n            };\r\n        });\r\n        let tasksArray = tasks.map((obj,index) =>{\r\n            return <TaskItem    key={obj.id}\r\n                                index={index}\r\n                                taskItem={obj}/>\r\n        });\r\n        return (\r\n            <table className=\"table table-bordered mt-5\">\r\n                <thead>\r\n                    <tr>\r\n                        <th>STT</th>\r\n                        <th>Tên</th>\r\n                        <th>Trạng thái</th>\r\n                        <th>Hành động</th>\r\n                    </tr>\r\n                    <tr>\r\n                        <th colSpan=\"2\">\r\n                            <input type=\"text\" className=\"form-control\" name=\"filterName\" placeholder=\"Tìm kiếm nhanh\" onChange={this.filterTable}></input>\r\n                        </th>\r\n                        <th>\r\n                            <select className=\"form-control\" name=\"filterStatus\" value={this.state.filterStatus} onChange={this.filterTable}>\r\n                                <option value={-1} >Tất cả</option>\r\n                                <option value={1} >Kích hoạt</option>\r\n                                <option value={0} >Ẩn</option>\r\n                            </select>\r\n                        </th>\r\n                        <th></th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {tasksArray}\r\n                </tbody>\r\n            </table>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        tasks: state.tasks,\r\n        filterFromTable : state.filterTask,\r\n        filterFromControl : state.controlFilter,\r\n    }\r\n}\r\nconst mapDispatchToProps = (dispatch, props) => {\r\n    return {\r\n        filterTable: (filterValue) => {\r\n            dispatch(action.tableFilter(filterValue));\r\n        }\r\n    };\r\n}\r\nexport default connect(mapStateToProps,mapDispatchToProps)(TaskList);","import React from 'react';\nimport \"./App.css\";\nimport TaskForm from \"./components/task-form\";\nimport Control from \"./components/control\";\nimport TaskList from \"./components/task-list\";\n\nimport { connect } from 'react-redux';\n\nclass App extends React.Component{\n    render(){\n        let toggleDisplay = this.props.displayForm;\n        let elmTaskForm = toggleDisplay ? <TaskForm/> : \"\";\n        return(\n            <div className=\"container-fluid\">\n                <h1 className=\"text-center\"><u><b>Quản lý công việc</b></u></h1>\n                <div className=\"row\">\n                    <div id=\"taskForm\" className={toggleDisplay ? \"col-3 mt-5\" : \"\"}>\n                        {elmTaskForm}\n                    </div>\n                    <div className={toggleDisplay === true ? \"col-9 mt-5\" : \"col-12 mt-5\"}>\n                        <Control/>\n                        <TaskList/>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\nconst mapStateToProps = state => {\n    return {\n        displayForm: state.displayForm.isDisplayForm,\n        keywordFilter: state.filterTask,\n    }\n};\nconst mapDispatchToProps = (dispatch, porps) => {\n    return {};\n}\nexport default connect(mapStateToProps,mapDispatchToProps) (App);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import * as types from \"./../constants/actionType\";\r\n\r\nconst data = JSON.parse(localStorage.getItem(\"tasks\"));\r\nvar initialState = data ? data : [];\r\n\r\nif(initialState.length === 0){ // ví dụ để chào hàng khi mới dô lần đầu k có task nào\r\n    initialState = [\r\n        {\r\n            id: 111-111-111,\r\n            name: \"Task example 1\",\r\n            status: true,\r\n        },\r\n        {\r\n            id: 222-222-222,\r\n            name: \"Task example 2\",\r\n            status: false,},\r\n        {\r\n            id: 333-333-333,\r\n            name: \"Task example 3\",\r\n            status: true,}\r\n    ];\r\n}\r\n\r\nvar reducer = (state = initialState, action) => {\r\n    switch(action.type){\r\n        case types.LIST_ALL: {return state;}\r\n        case types.ADD_TASK: {\r\n            let tempTask = {\r\n                id: action.task.id,\r\n                name: action.task.name,\r\n                status: action.task.status === \"true\" ? true : false,\r\n            };\r\n            // Chia ra 2 trường hợp, thêm mới và sửa cái đã có\r\n            if(!action.task.id){ // nếu k có id thì mình thêm 1 cái task mới\r\n                tempTask.id = getRandomString();\r\n                state.push(tempTask);\r\n            }\r\n            else { // nếu có id thì mình tiến hành sửa lại task trùng id\r\n                const index = findIndex(state, action.task.id);\r\n                state[index] = tempTask;\r\n            }\r\n            localStorage.setItem(\"tasks\",JSON.stringify(state));\r\n            return [...state];\r\n        }\r\n        case types.UPDATE_STATUS: {\r\n            const index = findIndex(state, action.id);\r\n            // Lấy ra, sửa, trả vào lại. Vì thay đổi trực tiếp xâu trong array > obj > property rồi return 1 array, nó k render lại\r\n            let tempTask = {...state[index]};\r\n            tempTask.status = !tempTask.status;\r\n            state[index] = tempTask;\r\n            //----------------\r\n            localStorage.setItem(\"tasks\",JSON.stringify(state));\r\n            return [...state];\r\n        };\r\n        case types.DELETE_TASK: {\r\n            const index = findIndex(state, action.id);\r\n            state.splice(index,1);\r\n            localStorage.setItem(\"tasks\",JSON.stringify(state));\r\n            return [...state];\r\n        }\r\n        default: return state;\r\n    }\r\n};\r\n\r\nconst getRandomString = () => {\r\n    function s4() {\r\n        return Math.floor((Math.random()+1) * 0x1000).toString(16).substring(1);\r\n    }\r\n    return (s4() + \"-\" + s4() + \"-\" + s4());\r\n}\r\n\r\nconst findIndex = function(state, numId) {  \r\n    let result = 0;\r\n    state.forEach(function(obj,index){\r\n        if( obj.id === numId){\r\n            result = index;\r\n        }\r\n    });\r\n    return result;\r\n}\r\n\r\nexport default reducer;","import * as types from \"./../constants/actionType\";\r\n\r\nvar initialState = {\r\n    isDisplayForm : false,\r\n    headerName: \"\",\r\n}; // default is close form\r\n\r\nvar reducer = (state = initialState, action) => {\r\n    switch(action.type){\r\n        case types.OPEN_FORM :{ // Disptach từ task-item(Sửa) và control(Thêm công việc)\r\n            return {\r\n                isDisplayForm: true,\r\n                headerName: action.headerName,\r\n            }\r\n        }\r\n        case types.CLOSE_FORM :{\r\n            return {\r\n                isDisplayForm: false,\r\n                headerName: state.headerName,\r\n            }\r\n        }\r\n        default: return state;\r\n    }\r\n};\r\n\r\nexport default reducer;","import * as types from \"./../constants/actionType\";\r\n\r\nvar initialState = {\r\n    id: \"\",\r\n    name: \"\",\r\n    status: \"\",\r\n};\r\n\r\nvar reducer = (state = initialState, action) => {\r\n    switch(action.type){\r\n        case types.EDIT_TASK: {\r\n            return {\r\n                id: action.task.id,\r\n                name: action.task.name,\r\n                status: action.task.status,\r\n            }\r\n        }\r\n        default: return state;\r\n    }\r\n};\r\n\r\nexport default reducer;","import * as types from \"./../constants/actionType\";\r\n\r\nvar initialState = {\r\n    filterName: \"\",\r\n    filterStatus: -1,\r\n};\r\n\r\nvar reducer = (state = initialState, action) => {\r\n    switch (action.type){\r\n        case (types.TABLE_FILTER): {\r\n            let newFilter = {\r\n                filterName: action.filterValue.filterName,\r\n                filterStatus: action.filterValue.filterStatus,\r\n            }\r\n            return newFilter;\r\n        }\r\n        default: return state;\r\n        \r\n    }\r\n}\r\n\r\nexport default reducer;","import * as types from \"../constants/actionType\";\r\n\r\nvar initialState = {\r\n    searchName: \"\",\r\n    sortStatus : {\r\n        type: \"name\",\r\n        direct: 1,\r\n    },\r\n};\r\n\r\nvar reducer = (state = initialState, action) => {\r\n    switch (action.type){\r\n        case (types.CONTROL_SORT): { // Nhận vào action.filterValue là 1 obj { type, direct }\r\n            return {\r\n                searchName: state.searchName,\r\n                sortStatus: action.filterValue,\r\n            };\r\n        }\r\n        case (types.CONTROL_SEARCH):{ // Nhận vào action.filterValue là 1 string\r\n            return {\r\n                searchName: action.filterValue,\r\n                sortStatus: state.sortStatus,\r\n            };\r\n        }\r\n        default: return state;\r\n        \r\n    }\r\n}\r\n\r\nexport default reducer;","import { combineReducers } from \"redux\";\r\nimport tasks from \"./tasks\";\r\nimport displayForm from \"./displayForm\";\r\nimport editTask from \"./editTask\";\r\nimport filterTask from \"./filterTasks\";\r\nimport controlFilter from \"./controlFilter\";\r\n\r\nconst sumReducer = combineReducers({\r\n    tasks: tasks,\r\n    displayForm: displayForm,\r\n    editTask: editTask,\r\n    filterTask: filterTask,\r\n    controlFilter: controlFilter\r\n});\r\n\r\nexport default sumReducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n//Redux\nimport { createStore } from 'redux';\nimport sumReducer from \"./reducers/index\";\nimport { Provider } from \"react-redux\";\n\nconst store = createStore(sumReducer, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store = {store}>\n    <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\nserviceWorker.unregister();\n"],"sourceRoot":""}